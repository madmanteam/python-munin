#!/usr/bin/python3

"""
Mobience's importer delay (minute) plugin for Munin.
"""

import os
from datetime import datetime
from munin import MuninPlugin
import re


class MobienceDelayPlugin(MuninPlugin):
    title = "Mobience Importer\'s delay"
    args = "--base 1000 -l 0"
    vlabel = "delay (minutes)"
    scale = False
    category = "Mobience"
    warning = os.environ.get('mobience_warn', 30)  # 30 minutes
    critical = os.environ.get('mobience_crit', 120)  # 120 minutes
    fields = (
        ('mobigate', dict(
            label="Mobience",
            type="GAUGE",
            draw="LINE2",
            min="0",
            info="Mobience Importer's delay in importer_mobience.log (minutes)",
            warning=str(warning),
            critical=str(critical)
        )),
        ('other', dict(
            label="Other",
            type="GAUGE",
            draw="LINE2",
            info="Mobience Importer's delay in importer_other.log (minutes)",
            min="0",
            warning=str(warning),
            critical=str(critical)
        ))
    )

    def execute(self):
        mobience_log_path = "/data/mobience2/importer_mobience.log"
        other_log_path = "/data/mobience2/importer_other.log"

        mobience_delay = self.read_file(mobience_log_path)
        other_delay = self.read_file(other_log_path)

        return dict(mobience=mobience_delay, other=other_delay)

    def read_file(self, path):
        if os.path.exists(path):
            with open(path, 'r') as f:
                lines = []
                for line in f:
                    if "At:" in line and " LD:" in line:
                        lines.append(line)
                size = len(lines)
                if size > 0:
                    line = lines[size-1]
                    s = re.search("At: ", line)
                    temp = line[s.end():]
                    e = re.search(" LD:", temp)
                    time_str = temp[:e.start()]
                    t_log = datetime.strptime(time_str, "%Y-%m-%d %H:%M:%S+00:00")
                else:
                    print("Not found 'At:' tag in {}".format(path))
                    return 0
        else:
            print("Not found log: {}".format(path))
            return 0
        start = t_log
        now = datetime.utcnow()
        offset = now - start
        delay = int(offset.total_seconds()/60)  # minute
        return delay

if __name__ == "__main__":
    MobienceDelayPlugin().run()
