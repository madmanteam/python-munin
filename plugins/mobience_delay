#!/usr/bin/python3

"""
Mobience's importer delay (minute) plugin for Munin.
"""

import os
from datetime import datetime
from munin import MuninPlugin
import re


class MobienceDelayPlugin(MuninPlugin):
    title = "Mobience Importer\'s delay"
    args = "--base 1000 -l 0"
    vlabel = "delay (minutes)"
    scale = False
    category = "mobience"

    @property
    def fields(self):
        warning = os.environ.get('delay_warn', 720)  # 720 minutes
        critical = os.environ.get('delay_crit', 1440)  # 1440 minutes
        return [("delay", dict(
                label="delay",
                info='Mobience importer\'s delay (calculate the minutes)',
                type="GAUGE",
                min="0",
                warning=str(warning),
                critical=str(critical)))]

    def execute(self):
        path = os.environ.get('LOG_URI', "/tmp/importer_mobience.log")
        if os.path.exists(path):
            with open(path, 'r') as f:
                lines = []
                for line in f:
                    if "At:" in line and " LD:" in line:
                        lines.append(line)
                size = len(lines)
                if size > 0:
                    line = lines[size-1]
                    s = re.search("At: ", line)
                    temp = line[s.end():]
                    e = re.search(" LD:", temp)
                    time_str = temp[:e.start()]
                    t_log = datetime.strptime(time_str, "%Y-%m-%d %H:%M:%S+00:00")
                else:
                    print("Not found 'At:' tag in {}".format(path))
                    return dict(delay=0)
        else:
            print("Not found log")
            return dict(delay=0)
        start = t_log
        now = datetime.now()
        offset = now - start
        delay = int(offset.total_seconds()/60)  # minute
        return dict(delay=delay)

if __name__ == "__main__":
    MobienceDelayPlugin().run()
